imports:
    - { resource: extractors.yaml }
    - { resource: improvers.yaml }
    - { resource: converters.yaml }
    - { resource: parsers.yaml }

services:
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Converter/'
            - '../src/DomDocument/'
            - '../src/Extractor/'
            - '../src/Improver/'
            - '../src/Parser/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    App\Xml\Render:
        arguments:
            $generator: "%env(DOMAIN)%"

    App\Command\FetchItemsCommand:
        tags: ['console.command']
        arguments:
            $domain: "%env(DOMAIN)%"
            $transport: "@messenger.transport.fetch_items"

    App\Command\RemoveItemsCommand:
        tags: ['console.command']

    App\MessageHandler\FetchItemsHandler:
        arguments:
            $domain: "%env(DOMAIN)%"

    App\EventListener\ItemSubscriber:
        arguments:
            $hub: "http://pubsubhubbub.appspot.com"
        tags:
            - { name: kernel.event_listener, event: app.after_item_cached, method: pingHub }

    App\EventListener\FeedSubscriber:
        tags:
            - { name: kernel.event_listener, event: app.after_feed_creation, method: sync }

    App\Xml\SimplePieProxy:
        arguments:
            $cache: "%kernel.cache_dir%/simplepie/"
            $itemLimit: 20
            $enableCache: false

    App\Validator\Constraints\ConstraintRssValidator:
        tags:
            - { name: validator.constraint_validator, alias: valid_rss }

    # external service
    imgur.client:
        class: Imgur\Client
        calls:
            - [ setOption, [ 'client_id', "%env(IMGUR_CLIENT_ID)%" ] ]
            - [ setOption, [ 'client_secret', "%env(IMGUR_CLIENT_SECRET)%" ] ]

    graby:
        class: Graby\Graby
        arguments:
            -
                error_message: ''
        calls:
            - [ setLogger, [ "@logger" ] ]
        tags:
            - { name: monolog.logger, channel: graby }

    graby.log_handler:
        class: Graby\Monolog\Handler\GrabyHandler

    Graby\Monolog\Handler\GrabyHandler:
        alias: graby.log_handler

    twitter.client:
        class: TwitterOAuth\TwitterOAuth
        arguments:
            -
                consumer_key: "%env(TWITTER_CONSUMER_KEY)%"
                consumer_secret: "%env(TWITTER_CONSUMER_SECRET)%"
                oauth_token: "%env(TWITTER_ACCESS_TOKEN)%"
                oauth_token_secret: "%env(TWITTER_ACCESS_TOKEN_SECRET)%"
                output_format: 'array'

    # custom formatter for import commande (below)
    monolog.import.formatter:
        class: Symfony\Bridge\Monolog\Formatter\ConsoleFormatter
        arguments:
            - "[%%datetime%%] %%start_tag%%%%message%%%%end_tag%% %%context%% %%extra%%\n"

    Http\Client\Common\HttpMethodsClientInterface: '@httplug.client.default.http_methods'

    content_extractor:
        class: App\Content\Extractor
        arguments:
            - "@feed.extractor.chain"
            - "@feed.improver.chain"
            - "@feed.converter.chain"
            - "@feed.parser.chain"

    simple_pie_proxy:
        class: App\Xml\SimplePieProxy
        arguments:
            - "%kernel.cache_dir%/simplepie/"
            - 20
            - false

    xml_render:
        class: App\Xml\Render
        arguments:
            - "%env(DOMAIN)%"

    # validator
    validator.rss.valid_rss:
        class: App\Validator\Constraints\ConstraintRssValidator
        arguments:
            - "@httplug.client.default.http_methods"
        tags:
            - { name: validator.constraint_validator, alias: valid_rss }
